local ecnet = require("ecnet");
os.loadAPI("hash");

local ADDRESS_CHANNEL = 25783;
local RESPONSE_CHANNEL = 25787;
local modem = peripheral.find("modem");
s_modem = ecnet.wrap(modem);

address = "none"

local connected = false

local UPDATE_CHANNEL = 3618;
local UPDATE_PASSHASH = "79b577d198b08557e89025d6e8ab48e5fb579f541debfe0acfcc34646c97acfc";

-- value of dat.type
local NETWORK_BKRESPONSE = "NETWORK_BKRESPONSE"; -- response to client
local NETWORK_ADDUSERDAT = "NETWORK_ADDUSERDAT"; -- add a new user to the database
local NETWORK_ISAUTHUSER = "NETWORK_ISAUTHUSER"; -- check if the users credentials are correct, sends back a boolean
local NETWORK_GETBALANCE = "NETWORK_GETBALANCE"; -- gets users balance, requires auth
local NETWORK_MODBALANCE = "NETWORK_MODBALANCE"; -- adds/subtracts from users balance, requires auth
local NETWORK_ADDADDRESS = "NETWORK_ADDADDRESS"; -- add an address that is authorized to do ATM stuff, requires a special password
local NETWORK_ISAUTHADDR = "NETWORK_ISAUTHADDR"; -- ask if address is authed
local NETWORK_SERCHPRICE = "NETWORK_SERCHPRICE"; -- get a price from the price table
local NETWORK_CAHRGPRICE = "NETWORK_CAHRGPRICE"; -- charge price
local NETWORK_TRANSFERDI = "NETWORK_TRANSFERDI"; -- transfer diamonds to another account
local NETWORK_GETHISTORY = "NETWORK_GETHISTORY"; -- get user account history
local NETWORK_WITHDRAWDI = "NETWORK_WITHDRAWDI"; -- withdraw diamonds from account and storage into entangled transfer chest, max three stacks at a time

function checkConnection()
	s_modem.connect(address, 4);
end

-- blocking, use this from a parallel
function checkForUpdates()
	modem.open(UPDATE_CHANNEL);
	while true do
		local event, modemSide, senderChannel, replyChannel, msg, distance = os.pullEvent("modem_message");

		if senderChannel == UPDATE_CHANNEL then
			if hash.hash(msg) == UPDATE_PASSHASH then
				print("update notification recived");
				print("launching install script");
				updating = true;
				shell.run("/install");
				return;
			end
		end
	end
end

-- generates a random password
function genPassword()

	all = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ{}:',.<>/?=+-_!@#$%^&*()\\|[];"

	pass = ""

	for i = 1, 25 do
		r = math.random(#all);
		pass = pass.. string.sub(all, r, r);
	end

	return pass;

end

function startProgram(programFunction, preventExit, updateOnExit)

	if preventExit == nil then
		preventExit = false;
	end

	if updateOnExit == nil then
		updateOnExit = false;
	end

	print("connecting to server");
	-- attemt to connect loop
	while not connected do
		print("getting server address");
		-- ask the broadcast channel what the bank server address is
		modem.transmit(ADDRESS_CHANNEL, RESPONSE_CHANNEL, "DNS_REQ BANK");
		modem.open(RESPONSE_CHANNEL);
		parallel.waitForAny(function()
			_, __, ___, ____, address, ______ = os.pullEvent("modem_message");
		end, 
		function()
			sleep(3);
		end)
		
		modem.close(RESPONSE_CHANNEL);
		print("address recieved: " .. tostring(address));

		connected = s_modem.connect(address, 3);
	end
	print("connected to server");
	-- we should be connected to the server now

	-- program
	repeat
		pcall(parallel.waitForAny, checkForUpdates, programFunction);
		-- program ended, treat this as an update request if allow exit is false
		if updateOnExit then
			pcall(shell.run("/install"));
		end
	until not preventExit

end

function addAuthAddress(password)
	checkConnection()
	local dat = {};
	dat.type = NETWORK_ADDADDRESS;
	dat.pass = password;
	s_modem.send(address, dat);

	local sender, msg = s_modem.receive(address, 5);
	if msg == nil then
		print("timed out");
	else
		if type(msg == "boolean") then
			if msg then
				print("success!");
			else
				print("failed to authenticate!");
			end
		else
			print("result: " .. msg);
		end
	end
end

-- returns a boolean
function addNewUser(name, password)
	checkConnection()
	local dat = {};
	dat.type = NETWORK_ADDUSERDAT;
	dat.name = name;
	dat.pass = password;
	s_modem.send(address, dat);

	local sender, msg = s_modem.receive(address, 15);
	if msg == nil then
		print("timed out");
	else
		if type(msg == "boolean") then
			return msg;
		end
	end
	return false;
end

-- returns a boolean
function checkUserCredentials(name, password) 
	checkConnection()
	local dat = {};
	dat.type = NETWORK_ISAUTHUSER;
	dat.name = name;
	dat.pass = password;
	s_modem.send(address, dat);

	local sender, msg = s_modem.receive(address, 15);
	if msg == nil then
		print("timed out");
	else
		if type(msg == "boolean") then
			return msg;
		end
	end
	return false;

end

-- returns a table containing .auth and .bal
function getUserBalance(name, password)
	checkConnection()
	local dat = {};
	dat.type = NETWORK_GETBALANCE;
	dat.name = name;
	dat.pass = password;
	s_modem.send(address, dat);

	local sender, msg = s_modem.receive(address, 15);
	if msg == nil then
		print("timed out");
	end
	return msg;
end

-- returns a boolean
function addBalance(name, password, ammount) 
	checkConnection()
	local dat = {};
	dat.type = NETWORK_MODBALANCE;
	dat.name = name;
	dat.pass = password;
	dat.val = ammount;
	s_modem.send(address, dat);

	local sender, msg = s_modem.receive(address, 15);
	if msg == nil then
		print("timed out");
	else
		if type(msg == "boolean") then
			return msg;
		end
	end
	return false;

end

-- returns a boolean
function subBalance(name, password, ammount)
	checkConnection()
	return addBalance(name, password, -ammount);
end

-- returns a boolean
function isAuthAddr()
	checkConnection()
	local dat = {};
	dat.type = NETWORK_ISAUTHADDR;
	s_modem.send(address, dat);

	local sender, msg = s_modem.receive(address, 15);
	if msg == nil then
		print("timed out");
	else
		if type(msg == "boolean") then
			return msg;
		end
	end
	return false;
end

-- returns price
function getPrice(tag)
	checkConnection();
	local dat = {};
	dat.type = NETWORK_SERCHPRICE;
	dat.tag = tag;
	s_modem.send(address, dat);

	local sender, msg = s_modem.receive(address, 15);
	if msg == nil then
		print("timed out");
	else
		return msg;
	end
	return 100000;
end

-- returns boolean
function chargePrice(name, password, tag)
	checkConnection();
	local dat = {};
	dat.type = NETWORK_CAHRGPRICE;
	dat.name = name;
	dat.pass = password;
	dat.tag = tag;
	s_modem.send(address, dat);

	local sender, msg = s_modem.receive(address, 15);
	if msg == nil then
		print("timed out");
	else
		if type(msg == "boolean") then
			return msg;
		end
	end
	return false;
end

-- returns boolean
function wireTransfer(name, password, toName, ammount)
	checkConnection();
	local dat = {};
	dat.type = NETWORK_TRANSFERDI;
	dat.name = name;
	dat.pass = password;
	dat.to = toName;
	dat.val = ammount;
	s_modem.send(address, dat);

	local sender, msg = s_modem.receive(address, 15);
	if msg == nil then
		print("timed out");
	else
		if type(msg == "boolean") then
			return msg;
		end
	end
	return false;
end

-- returns string
function getHistory(name, password)
	checkConnection();
	local dat = {};
	dat.type = NETWORK_GETHISTORY;
	dat.name = name;
	dat.pass = password;
	s_modem.send(address, dat);

	local sender, msg = s_modem.receive(address, 60); -- could be a large packet, may take some time
	if msg == nil then
		print("timed out");
	else
		return msg;
	end
	return "Could not retrieve history";
end

-- returns boolean REQUIRES AUTH
-- this function will NOT handle moving the items from the entangled chest to somwhere that the user can access them!!
-- DO NOT give the user direct access to the entangled chest
-- the system is designed to prevent users from being able to steal from the entangled chest
-- but you never know...
-- this function is really only used for ATMs, hence why it needs auth
function withdraw(name, password, ammount)

	checkConnection();
	local dat = {};
	dat.type = NETWORK_WITHDRAWDI;
	dat.name = name;
	dat.pass = password;
	dat.val = ammount;
	s_modem.send(address, dat);

	local sender, msg = s_modem.receive(address, 15);
	if msg == nil then
		print("timed out");
	else
		if type(msg == "boolean") then
			return msg;
		end
	end
	return false;
end