require("bankClientLib");
os.loadAPI("hash");
-- change these variables to match peripheral names for this atm

-- make sure we are connecting over the motem so we can transfer items
local function netFilter(name)
	if name:find("_", 1, true) then
		return true;
	end
	return false;
end

local KEYCARD_DATA_FILENAME = "/keycardData";

local inputChest = peripheral.find("minecraft:barrel", netFilter);
local outputChest = peripheral.find("minecraft:chest", netFilter);
local floppyDrive = peripheral.find("drive", netFilter);
local cardSwiper = peripheral.wrap("bottom");

-- floppyDrive.isDiskPresent();
-- floppyDrive.ejectDisk();
-- floppyDrive.setDiskLabel();
-- floppyDrive.getMountPath();

local function clearScreen()
	term.clear();
	term.setCursorPos(1, 1);
end

local function giveKeycard(name, password)
	if not floppyDrive.isDiskPresent() then
		print("ERROR: Out of floppy drives!");
		sleep(10);
		clearScreen();
		return;
	end

	local mountPath = floppyDrive.getMountPath();
	local dataPath = mountPath .. KEYCARD_DATA_FILENAME;

	print("flashing card data");
	local file = fs.open(dataPath, "w");
	file.writeLine(name);
	file.writeLine(password);
	file.close();

	sleep(1);

	floppyDrive.setDiskLabel("Official Krusty Card: " .. name);

	print("ejecting card");
	floppyDrive.ejectDisk();

	sleep(1);
end

local function newAccountInterface()

	if not floppyDrive.isDiskPresent() then
		print("ERROR: Out of floppy drives!");
		sleep(10);
		clearScreen();
		return;
	end

	local name = "";
	local pass = "";

	local accountCreated = false;
	for i = 1, 3 do

		clearScreen();

		print("Enter a name for the account");
		name = read();

		print("Enter a password for the account");
		print("This will be used in the event that you lose your keycard");
		pass = read("*");

		print("Please Re-Type the password");
		local pass2 = read("*");

		if pass ~= pass2 then
			print("The passwords do not match, please try again!");
			sleep(2);
			clearScreen();
		else
			if addNewUser(name, hash.hash(pass)) then
				accountCreated = true;
				break;
			end
		end
	end

	if not accountCreated then
		print("Faild to create account");
		sleep(2);
		clearScreen();
		return;
	end

	clearScreen();
	print("Account created, Creating Keycard...");
	print("Please try not to lose it");

	sleep(1);

	giveKeycard(name, hash.hash(pass));

	clearScreen();

	print("Thank you! Come Again!");
	sleep(1);

	clearScreen();

end

local function depositeInterface(name, password)

	clearScreen();

	if not isAuthAddr() then
		print("An error was encountered depositing items...");
		sleep(0.5);
		clearScreen();
		return;
	end

	print("put diamonds in barrel and press any key to continue...");

	os.pullEvent("key");
	os.pullEvent("char");

	local dcount = 0;
	-- count and move diamonds
	for slot, item in pairs(inputChest.list()) do
		if item.name == "minecraft:diamond" then
			dcount = dcount + item.count;
			inputChest.pushItems(peripheral.getName(outputChest), slot);
		end
	end

	print("found " .. dcount .. " diamonds, depositing...");
	sleep(0.5);
	-- adjust user balance

	addBalance(name, password, dcount);
	sleep(1.5);

end

local function loggedInInterface(name, password)

	clearScreen();
	print("you are logged in to: " .. name);

	local timeoutTimerMax = 15
	local timeoutTimer = timeoutTimerMax;

	local balance = 0;

	parallel.waitForAny(
		function()
			-- inactivity timer
			while timeoutTimer > 0 do
				timeoutTimer = timeoutTimer - 1;
				sleep(1);
			end
			clearScreen();
			print("Logging out due to inactivity...");
			sleep(1);
		end, 
		function()
			while true do

				local bal = getUserBalance(name, password);

				if bal.auth then
					balance = bal.bal;
				end

				clearScreen();
				print("logged in to: " .. name);
				print("account balance: " .. balance .. " diamonds")
				print("1. deposit");
				print("2. print new card");
				print("3. log out");

				-- reset timer on keypresses
				local event, key = os.pullEvent("key");
				os.pullEvent("char");
				timeoutTimer = timeoutTimerMax;
				local k = keys.getName(key);

				if k == "one" then
					timeoutTimer = timeoutTimerMax * 4;
					depositeInterface(name, password);
					timeoutTimer = timeoutTimerMax;
				elseif k == "two" then
					timeoutTimer = timeoutTimerMax * 4;
					giveKeycard(name, password);
					timeoutTimer = timeoutTimerMax;
				elseif k == "three" then
					break;
				end

			end
		end)

	print("Logging out...");

end

local function login(name, password)
	clearScreen();

	print("Attempting to log into account: " .. name);
	sleep(0.5);

	if checkUserCredentials(name, password) then
		print("Login sucsessfull!");
		sleep(0.5);
		term.clear();
		loggedInInterface(name, password);
	else
		print("Login failed: bad credentials!");
		s_modem.connect(address, 4);
		sleep(0.5);
		term.clear();
		return;
	end

end

local function loginInterface()
	clearScreen();

	print("Enter account name: ");
	local name = read();

	print("Enter account password: ");
	local pass = read("*");

	clearScreen();
	login(name, hash.hash(pass));
end

local function loginKeycard()
	clearScreen();
	print("Reading keycard");
	if disk.isPresent("bottom") then
		local mountPath = disk.getMountPath("bottom");

		local path = mountPath .. KEYCARD_DATA_FILENAME;

		print("Keycard found, parsing");

		local file = fs.open(path, "r");
		local name = file.readLine();
		local pass = file.readLine();
		file.close();

		disk.eject("bottom");

		print("Keycard read sucsessfull, logging in...");
		clearScreen();
		login(name, pass);

	else
		print("Failed to read keycard!");
		sleep(2);
		clearScreen();
		return;
	end
end

connect();

while true do
	-- draw main page ui
	clearScreen();
	print("1: create new account");
	print("2: login to exising account with password")



	local event, a1, a2 = os.pullEvent();
	if event == "disk" then
		if a1 == "bottom" then
			-- attempt keycard swipe
			loginKeycard();
		end
	elseif event == "key" then
		os.pullEvent("char") -- get rid of the char event
		if not a2 then
			local k = keys.getName(a1);
			if k == "one" then
				newAccountInterface();
			elseif k == "two" then
				loginInterface();
			end
		end
	end
end